from telethon import TelegramClient, sync, events
from telethon.tl.functions.channels import GetMessagesRequest
import unittest
import time




# Your API ID, hash and session string here
api_id = int('')
api_hash = ""
client = TelegramClient('session_name', api_id, api_hash)


client.start()


class TG_test(unittest.TestCase):
    def testStart(self):
        try:
            client.send_message('@MIEMConverter_bot', '/start')
            time.sleep(2)
            messages = client.get_messages('@MIEMConverter_bot')
            for message in client.get_messages('@MIEMConverter_bot', limit=1):
                m = message.message
            self.assertEqual(len(messages), 1)
            text = f'fathutnik, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MIEMUniversalBot ü§© \n\n–î–∞–Ω–Ω—ã–π –±–æ—Ç –∏–º–µ–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –≤—Å–µ –æ–Ω–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ! \n\n/convert - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã!\n/get_coffee_picture - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ñ–µ!\n/update_math_skills - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –±–æ–ª—å—à–æ–≥–æ —É–º–∞!\n/get_smart_quote - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—â–∏ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π!\n\/shakal_picture - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —à–∞–∫–∞–ª–∏–Ω–≥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏!'
            self.assertRegex(m, text)
        except:
            self.assertFalse(True)
    def testcofe(self):
        try:
            client.send_message('@MIEMConverter_bot', '–•–æ—á—É –∫–æ—Ñ–µ')
            time.sleep(2)
            messages = client.get_messages('@MIEMConverter_bot')
            for message in client.get_messages('@MIEMConverter_bot', limit=1):
                m = message.message
            self.assertEqual(len(messages), 1)
            text = f'–í–æ—Ç –≤–∞—à–∞ —Ñ–æ—Ç–æ—á–∫–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞'
            self.assertRegex(m, text)
            client.send_message('@MIEMConverter_bot', '–•–æ—á—É –≤ –Ω–∞—á–∞–ª–æ')
        except:
            self.assertFalse(True)
    def testum(self):
        try:
            time.sleep(2)
            client.send_message('@MIEMConverter_bot', '–•–æ—á—É –ø–æ—É–º–Ω–∏—á–∞—Ç—å –ø–µ—Ä–µ–¥ –¥—Ä—É–∑—å—è–º–∏')
            time.sleep(2)
            messages = client.get_messages('@MIEMConverter_bot')
            for message in client.get_messages('@MIEMConverter_bot', limit=1):
                m = message.message
            self.assertEqual(len(messages), 1)
            text = f'–ö–∞–∫ –æ–¥–Ω–∞–∂–¥—ã —Å–∫–∞–∑–∞–ª'
            self.assertRegex(m, text)
            client.send_message('@MIEMConverter_bot', '–•–æ—á—É –≤ –Ω–∞—á–∞–ª–æ')
        except:
            self.assertFalse(True)
    def testphoto(self):
        try:
            time.sleep(2)
            client.send_message('@MIEMConverter_bot', '–ù–∞–¥–æ —á–µ—Ç–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –ø–æ–¥—à–∞–º–∞–Ω–∏—Ç—å ')
            time.sleep(2)
            messages = client.get_messages('@MIEMConverter_bot')
            for message in client.get_messages('@MIEMConverter_bot', limit=1):
                m = message.message
            self.assertEqual(len(messages), 1)
            text = f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –∑–∞—à–∞–∫–∞–ª–∏—Ç—å ·èá'
            self.assertRegex(m, text)
            client.send_message('@MIEMConverter_bot', '–•–æ—á—É –≤ –Ω–∞—á–∞–ª–æ')
            client.send_message('@MIEMConverter_bot', '–•–æ—á—É –≤ –Ω–∞—á–∞–ª–æ')
        except:
            self.assertFalse(True)
    def testmath(self):
        try:
            time.sleep(2)
            client.send_message('@MIEMConverter_bot', '–ù–∞–¥–æ –∫ –º–∞—Ç–∞–Ω—É –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è')
            time.sleep(2)
            messages = client.get_messages('@MIEMConverter_bot')
            for message in client.get_messages('@MIEMConverter_bot', limit=1):
                m = message.message
            self.assertEqual(len(messages), 1)
            text = f'–í–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–≤–æ–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—á–µ—Ç–∞, —á–µ–º –±—ã—Å—Ç—Ä–µ–µ —Ä–µ—à–∏—Ç–µ, —Ç–µ–º –ª—É—á—à–µ!'
            self.assertRegex(m, text)
            client.send_message('@MIEMConverter_bot', '–•–æ—á—É –≤ –Ω–∞—á–∞–ª–æ')
            client.send_message('@MIEMConverter_bot', '–•–æ—á—É –≤ –Ω–∞—á–∞–ª–æ')
        except:
            self.assertFalse(True)
    def testdollar(self):
        try:
            time.sleep(2)
            client.send_message('@MIEMConverter_bot', '–ú–Ω–µ –±—ã –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å üí∂')
            time.sleep(2)
            messages = client.get_messages('@MIEMConverter_bot')
            for message in client.get_messages('@MIEMConverter_bot', limit=1):
                m = message.message
            self.assertEqual(len(messages), 1)
            text = f'fathutnik, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ—é ü§©'
            self.assertRegex(m, text)
            client.send_message('@MIEMConverter_bot', '–•–æ—á—É –≤ –Ω–∞—á–∞–ª–æ')
            client.send_message('@MIEMConverter_bot', '–•–æ—á—É –≤ –Ω–∞—á–∞–ª–æ')
        except:
            self.assertFalse(True)



















